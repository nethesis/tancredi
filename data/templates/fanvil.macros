#
# dsskey
#
{% macro softkey_setup(index, ctx) %}

{% if ctx['softkey_type_' ~ index] == 'ldap' %}
SoftFkey{{ index }} Type     :3
SoftFkey{{ index }} Value    :F_LDAP@0
SoftFkey{{ index }} Title    :
{% elseif ctx['softkey_type_' ~ index] == 'forward' %}
SoftFkey{{ index }} Type     :3
SoftFkey{{ index }} Value    :F_CFWD
SoftFkey{{ index }} Title    :
{% elseif ctx['softkey_type_' ~ index] == 'pickup' %}
SoftFkey{{ index }} Type     :3
SoftFkey{{ index }} Value    :F_PICKUP
SoftFkey{{ index }} Title    :
{% elseif ctx['softkey_type_' ~ index] == 'speed_dial' %}
SoftFkey{{ index }} Type     :1
SoftFkey{{ index }} Value    :{{ ctx['softkey_value_' ~ index] ~ '@1/f' }}
SoftFkey{{ index }} Title    :{{ ctx['softkey_label_' ~ index] | default('SPD') }}
{% elseif ctx['softkey_type_' ~ index] == 'group_pickup' %}
SoftFkey{{ index }} Type     :1
SoftFkey{{ index }} Value    :{{ ctx['pickup_group'] ~ '@1/f' }}
SoftFkey{{ index }} Title    :{{ fanvil.gettext('Group pickup') }}
{% else %}
SoftFkey{{ index }} Type     :0
SoftFkey{{ index }} Value    :
SoftFkey{{ index }} Title    :
{% endif %}
{% endmacro softkey_setup %}

#
# screen_softkey -- configure the Desktop screen soft keys functions
#
{% macro screen_softkey(type, index, ctx) %}
{% set screen_type = {
     '': 'none',
     'forward': 'dsskey' ~ index,
     'dnd': 'dnd',
     'recall': 'redial',
     'pick_up': 'dsskey' ~ index,
     'speed_dial': 'dsskey' ~ index,
     'group_pickup': 'dsskey' ~ index,
     'history': 'history',
     'menu': 'menu',
     'status': 'status',
     'ldap': 'dsskey' ~ index,
     'prefix': 'dsskey' ~ index,
} %}
    {{- screen_type[type] ?: 'none' -}}
{% endmacro screen_softkey %}

#
# scheme_map -- translate "provisioning_url_scheme" to Fanvil code
#
{% macro scheme_map(scheme) %}
{% if scheme == 'ftp' %}
    {{- '1' -}}
{% elseif scheme == 'tftp' %}
    {{- '2' -}}
{% elseif scheme == 'http' %}
    {{- '4' -}}
{% elseif scheme == 'https' %}
    {{- '5' -}}
{% else %}
    {{- '0' -}}
{% endif %}
{% endmacro scheme_map %}

#
# dtmf_map -- translate "account_dtmf_type" value to Fanvil code
#
{% macro dtmf_map(account_dtmf_type) %}
{% if account_dtmf_type == 'inband' %}
    {{- '0' -}}
{% elseif account_dtmf_type == 'rfc4733' %}
    {{- '1' -}}
{% elseif account_dtmf_type == 'sip_info' %}
    {{- '2' -}}
{% else %}
    {{- '3' -}}
{% endif %}
{% endmacro dtmf_map %}

#
# b2v -- convert a boolean value to '0' or '1' with a fallback value for NULL
#
{% macro b2v(value, fallback) %}
{% if value is null %}
    {{- fallback ?? '0' -}}
{% else %}
    {{- value is empty ? '0' : '1' -}}
{% endif %}
{% endmacro b2v %}

#
# National emergency call number
#
{% macro emergency_map(country) %}
{%- set emergency_map = {
    "it": "118",
} -%}
{% if emergency_map[country] is defined %}
    {{- emergency_map[country] -}}
{% endif %}
{% endmacro emergency_map %}


#
# Translate the tones country to Fanvil tone code
#
{% macro tones_code(country) %}
    {%- set tones = {
        "it": "21"
} -%}
    {{- tones[country] ?? '21' -}}
{% endmacro tones_code %}

#
# Translate the language name to Fanvil language code
#
{% macro language_code(lang) %}
    {%- set code = {
        "en": "0",
        "it": "7"
} -%}
    {{- code[lang] ?? '0' -}}
{% endmacro language_code %}

#
# Translate generic strings
#
{% macro gettext(txt, lang) %}
    {%- set l10n = {
        'it': {
            'Phonebook': 'Rubrica'
        }
    } -%}
    {% if l10n[lang] is defined %}
        {{- l10n[lang][txt] ?? txt -}}
    {% else %}
        {{- txt -}}
    {% endif %}
{% endmacro gettext %}

#
# The Fanvil time zone parameters map
#
{% macro tz_map(tz, field) %}
{%- set tz_map = {
  "Europe/Rome": {
    "location": "13",
    "name": "UTC+1",
    "offset": "4"
  },
  "UTC": {
    "location": "1",
    "name": "UTC",
    "offset": "0"
  }
} -%}
{% if tz_map[tz] is defined %}
    {{- tz_map[tz][field] -}}
{% else %}
    {{- tz_map['UTC'][field] -}}
{% endif %}
{% endmacro tz_map %}

#
# Calculate the hours to wait before the next upgrade round
#
{% macro upgrade_wait_hours(timezone) %}
    {{- ((('tomorrow 01:00' | date('U', timezone)) - ('now' | date('U', timezone)))/3600 + random(0,4)) | round -}}
{% endmacro upgrade_wait_hours %}
